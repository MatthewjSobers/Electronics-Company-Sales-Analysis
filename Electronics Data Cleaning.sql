--DATA CLEANING

SELECT *
FROM STAGING_TABLE;

--verify if any entries that are neither female or male
SELECT GENDER, COUNT(GENDER) AS GEND_COUNT
FROM STAGING_TABLE
WHERE GENDER <> 'Female' AND GENDER <> 'Male'
GROUP BY GENDER;
 --delete those entries
DELETE FROM STAGING_TABLE
WHERE GENDER <> 'Female'
AND GENDER <> 'Male';

--Check for unnectpected results for loyalty_member
SELECT LOYALTY_MEMBER, COUNT(LOYALTY_MEMBER) AS COUNT_MEMB
FROM STAGING_TABLE
WHERE LOYALTY_MEMBER <> 'Yes'
AND LOYALTY_MEMBER <> 'No'
GROUP BY LOYALTY_MEMBER;

--check for unexpectted results for these fields

SELECT DISTINCT PRODUCT_TYPE, PAYMENT_METHOD
FROM STAGING_TABLE;


SELECT DISTINCT ORDER_STATUS, SHIPPING_TYPE
FROM STAGING_TABLE;

--change null values in the add_ons_purchased field to 'None'
UPDATE STAGING_TABLE
SET ADD_ONS_PURCHASED = 'None'
WHERE ADD_ONS_PURCHASED IS NULL;

--verify if any null values
SELECT *
FROM STAGING_TABLE
WHERE CUSTOMER_ID IS NULL
   OR AGE IS NULL
   OR GENDER IS NULL
   OR LOYALTY_MEMBER IS NULL
   OR PRODUCT_ID IS NULL
   OR PRODUCT_TYPE IS NULL
   OR UNIT_PRICE IS NULL
   OR RATING IS NULL
   OR QUANTITY IS NULL
   OR TOTAL_PRICE IS NULL
   OR ORDER_ID IS NULL
   OR ORDER_STATUS IS NULL
   OR PAYMENT_METHOD IS NULL
   OR PURCHASE_DATE IS NULL
   OR SHIPPING_TYPE IS NULL
   OR ADD_ONS_PURCHASED IS NULL;

--Insure all prices/quantities/age are positive numbers
SELECT *
FROM STAGING_TABLE
WHERE UNIT_PRICE < 0
OR TOTAL_PRICE < 0
OR QUANTITY < 0
OR ADD_ON_TOTAL < 0
OR AGE < 0;

--verify correct product id to product type
SELECT DISTINCT PRODUCT_ID, PRODUCT_TYPE
FROM STAGING_TABLE;

--Update the incorrect product_types associated to a product_id
MERGE INTO STAGING_TABLE ST
USING (
    WITH PRODUCT_TYPE_COUNTS AS ( --table of the number of product_types associted with each product_id
        SELECT PRODUCT_ID, PRODUCT_TYPE, COUNT(*) AS TYPE_COUNT
        FROM STAGING_TABLE
        GROUP BY PRODUCT_ID, PRODUCT_TYPE
    ),
    MOST_FREQUENT_TYPE AS (--table of the most frequent type associated with each id
        SELECT PRODUCT_ID, PRODUCT_TYPE
        FROM (
            SELECT PRODUCT_ID, PRODUCT_TYPE, TYPE_COUNT,
                ROW_NUMBER() OVER (PARTITION BY PRODUCT_ID
                ORDER BY TYPE_COUNT DESC) AS rn
            FROM PRODUCT_TYPE_COUNTS
        ) RANKED_PRODUCTS
        WHERE rn = 1
    )
        SELECT * FROM MOST_FREQUENT_TYPE
    ) MF
    ON (ST.PRODUCT_ID = MF.PRODUCT_ID)
    WHEN MATCHED THEN
        UPDATE SET ST.PRODUCT_TYPE = MF.PRODUCT_TYPE;
        
--Update the incorrect UNIT_PRICE associated to a product_id
MERGE INTO STAGING_TABLE ST
USING(
WITH PRODUCT_COUNT AS (
    SELECT PRODUCT_ID, UNIT_PRICE, COUNT(UNIT_PRICE) AS UNIT_COUNT
    FROM STAGING_TABLE
    GROUP BY PRODUCT_ID, UNIT_PRICE
    ), PRODUCT_RANK AS (
        SELECT PRODUCT_ID, UNIT_PRICE
        FROM (
            SELECT PRODUCT_ID, UNIT_PRICE, UNIT_COUNT,
            ROW_NUMBER() OVER (PARTITION BY PRODUCT_ID ORDER BY UNIT_COUNT DESC) AS RN
            FROM PRODUCT_COUNT
        ) RANKED_PROD_PRICE WHERE RN = 1
    ) 
    SELECT *
    FROM PRODUCT_RANK
) PF
    ON (ST.PRODUCT_ID = PF.PRODUCT_ID)
    WHEN MATCHED THEN
    UPDATE SET ST.UNIT_PRICE = PF.UNIT_PRICE;
SELECT DISTINCT PRODUCT_ID, UNIT_PRICE
FROM STAGING_TABLE;

--verify the dates are all in correct format
SELECT PURCHASE_DATE
FROM STAGING_TABLE
WHERE PURCHASE_DATE NOT LIKE '__-__-__';

